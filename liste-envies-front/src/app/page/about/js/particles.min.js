(function () {
  var e = this;
  (e.N2_ = e.N2_ || { r: [], d: [] }),
    (e.N2R =
      e.N2R ||
      function () {
        e.N2_.r.push(arguments);
      }),
    (e.N2D =
      e.N2D ||
      function () {
        e.N2_.d.push(arguments);
      });
}.call(window),
  N2D("particlesJS", function (e, a) {
    function t(e) {
      var a = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
      e = e.replace(a, function (e, a, t, i) {
        return a + a + t + t + i + i;
      });
      var t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
      return t
        ? {
            r: parseInt(t[1], 16),
            g: parseInt(t[2], 16),
            b: parseInt(t[3], 16)
          }
        : null;
    }
    function i(e, a, t) {
      return Math.min(Math.max(e, a), t);
    }
    function n(e, a) {
      return a.indexOf(e) > -1;
    }
    function s(e, a) {
      var t = document.createElement("canvas");
      t.className = "n-particles-js-canvas-el";
      var i = e.append(t);
      return i.length ? new r(t, a) : !1;
    }
    var r = function (s, r) {
      this.pJS = {
        canvas: { el: s, w: s.offsetWidth, h: s.offsetHeight },
        particles: {
          number: { value: 400, density: { enable: !0, value_area: 800 } },
          color: { value: "#fff" },
          shape: {
            type: "circle",
            stroke: { width: 0, color: "#ff0000" },
            polygon: { nb_sides: 5 },
            image: { src: "", width: 100, height: 100 }
          },
          opacity: {
            value: 1,
            random: !1,
            anim: { enable: !1, speed: 2, opacity_min: 0, sync: !1 }
          },
          size: {
            value: 20,
            random: !1,
            anim: { enable: !1, speed: 20, size_min: 0, sync: !1 }
          },
          line_linked: {
            enable: !0,
            distance: 100,
            color: "#fff",
            opacity: 1,
            width: 1
          },
          move: {
            enable: !0,
            speed: 2,
            direction: "none",
            random: !1,
            straight: !1,
            out_mode: "out",
            bounce: !1,
            attract: { enable: !1, rotateX: 3e3, rotateY: 3e3 }
          },
          array: []
        },
        interactivity: {
          detect_on: "canvas",
          events: {
            onhover: { enable: !0, mode: "grab" },
            onclick: { enable: !0, mode: "push" },
            resize: !0
          },
          modes: {
            grab: { distance: 100, line_linked: { opacity: 1 } },
            bubble: { distance: 200, size: 80, duration: 0.4 },
            repulse: { distance: 200, duration: 0.4 },
            push: { particles_nb: 4 },
            remove: { particles_nb: 2 }
          },
          mouse: {}
        },
        retina_detect: !1,
        fn: { interact: {}, modes: {}, vendors: {} },
        tmp: {}
      };
      var c = this.pJS;
      r && Object.deepExtend(c, r),
        (c.tmp.obj = {
          size_value: c.particles.size.value,
          size_anim_speed: c.particles.size.anim.speed,
          move_speed: c.particles.move.speed,
          line_linked_distance: c.particles.line_linked.distance,
          line_linked_width: c.particles.line_linked.width,
          mode_grab_distance: c.interactivity.modes.grab.distance,
          mode_bubble_distance: c.interactivity.modes.bubble.distance,
          mode_bubble_size: c.interactivity.modes.bubble.size,
          mode_repulse_distance: c.interactivity.modes.repulse.distance
        }),
        (c.fn.retinaInit = function () {
          c.retina_detect && window.devicePixelRatio > 1
            ? ((c.canvas.pxratio = window.devicePixelRatio),
              (c.tmp.retina = !0))
            : ((c.canvas.pxratio = 1), (c.tmp.retina = !1)),
            (c.canvas.w = c.canvas.el.offsetWidth * c.canvas.pxratio),
            (c.canvas.h = c.canvas.el.offsetHeight * c.canvas.pxratio),
            (c.particles.size.value = c.tmp.obj.size_value * c.canvas.pxratio),
            (c.particles.size.anim.speed =
              c.tmp.obj.size_anim_speed * c.canvas.pxratio),
            (c.particles.move.speed = c.tmp.obj.move_speed * c.canvas.pxratio),
            (c.particles.line_linked.distance =
              c.tmp.obj.line_linked_distance * c.canvas.pxratio),
            (c.interactivity.modes.grab.distance =
              c.tmp.obj.mode_grab_distance * c.canvas.pxratio),
            (c.interactivity.modes.bubble.distance =
              c.tmp.obj.mode_bubble_distance * c.canvas.pxratio),
            (c.particles.line_linked.width =
              c.tmp.obj.line_linked_width * c.canvas.pxratio),
            (c.interactivity.modes.bubble.size =
              c.tmp.obj.mode_bubble_size * c.canvas.pxratio),
            (c.interactivity.modes.repulse.distance =
              c.tmp.obj.mode_repulse_distance * c.canvas.pxratio);
        }),
        (c.fn.canvasInit = function () {
          c.canvas.ctx = c.canvas.el.getContext("2d");
        }),
        (c.fn.canvasSize = function () {
          (c.canvas.el.width = c.canvas.w),
            (c.canvas.el.height = c.canvas.h),
            c &&
              c.interactivity.events.resize &&
              window.addEventListener("resize", function () {
                (c.canvas.w = c.canvas.el.offsetWidth),
                  (c.canvas.h = c.canvas.el.offsetHeight),
                  c.tmp.retina &&
                    ((c.canvas.w *= c.canvas.pxratio),
                    (c.canvas.h *= c.canvas.pxratio)),
                  (c.canvas.el.width = c.canvas.w),
                  (c.canvas.el.height = c.canvas.h),
                  c.particles.move.enable ||
                    (c.fn.particlesEmpty(),
                    c.fn.particlesCreate(),
                    c.fn.particlesDraw(),
                    c.fn.vendors.densityAutoParticles()),
                  c.fn.vendors.densityAutoParticles();
              });
        }),
        (c.fn.resize = function () {
          (c.canvas.w = c.canvas.el.offsetWidth),
            (c.canvas.h = c.canvas.el.offsetHeight),
            c.tmp.retina &&
              ((c.canvas.w *= c.canvas.pxratio),
              (c.canvas.h *= c.canvas.pxratio)),
            (c.canvas.el.width = c.canvas.w),
            (c.canvas.el.height = c.canvas.h),
            c.particles.move.enable ||
              (c.fn.particlesEmpty(),
              c.fn.particlesCreate(),
              c.fn.particlesDraw(),
              c.fn.vendors.densityAutoParticles()),
            c.fn.vendors.densityAutoParticles();
        }),
        (c.fn.canvasPaint = function () {
          c.canvas.ctx.fillRect(0, 0, c.canvas.w, c.canvas.h);
        }),
        (c.fn.canvasClear = function () {
          c.canvas.ctx.clearRect(0, 0, c.canvas.w, c.canvas.h);
        }),
        (c.fn.particle = function (e, i, n) {
          if (
            ((this.radius =
              (c.particles.size.random ? Math.random() : 1) *
              c.particles.size.value),
            c.particles.size.anim.enable &&
              ((this.size_status = !1),
              (this.vs = c.particles.size.anim.speed / 100),
              c.particles.size.anim.sync ||
                (this.vs = this.vs * Math.random())),
            (this.x = n ? n.x : Math.random() * c.canvas.w),
            (this.y = n ? n.y : Math.random() * c.canvas.h),
            this.x > c.canvas.w - 2 * this.radius
              ? (this.x = this.x - this.radius)
              : this.x < 2 * this.radius && (this.x = this.x + this.radius),
            this.y > c.canvas.h - 2 * this.radius
              ? (this.y = this.y - this.radius)
              : this.y < 2 * this.radius && (this.y = this.y + this.radius),
            c.particles.move.bounce && c.fn.vendors.checkOverlap(this, n),
            (this.color = {}),
            "object" == typeof e.value)
          )
            if (e.value instanceof Array) {
              var s =
                e.value[
                  Math.floor(Math.random() * c.particles.color.value.length)
                ];
              this.color.rgb = t(s);
            } else
              e.value.r != a &&
                e.value.g != a &&
                e.value.b != a &&
                (this.color.rgb = { r: e.value.r, g: e.value.g, b: e.value.b }),
                e.value.h != a &&
                  e.value.s != a &&
                  e.value.l != a &&
                  (this.color.hsl = {
                    h: e.value.h,
                    s: e.value.s,
                    l: e.value.l
                  });
          else
            "random" == e.value
              ? (this.color.rgb = {
                  r: Math.floor(256 * Math.random()) + 0,
                  g: Math.floor(256 * Math.random()) + 0,
                  b: Math.floor(256 * Math.random()) + 0
                })
              : "string" == typeof e.value &&
                ((this.color = e), (this.color.rgb = t(this.color.value)));
          (this.opacity =
            (c.particles.opacity.random ? Math.random() : 1) *
            c.particles.opacity.value),
            c.particles.opacity.anim.enable &&
              ((this.opacity_status = !1),
              (this.vo = c.particles.opacity.anim.speed / 100),
              c.particles.opacity.anim.sync ||
                (this.vo = this.vo * Math.random()));
          var r = {};
          switch (c.particles.move.direction) {
            case "top":
              r = { x: 0, y: -1 };
              break;
            case "top-right":
              r = { x: 0.5, y: -0.5 };
              break;
            case "right":
              r = { x: 1, y: -0 };
              break;
            case "bottom-right":
              r = { x: 0.5, y: 0.5 };
              break;
            case "bottom":
              r = { x: 0, y: 1 };
              break;
            case "bottom-left":
              r = { x: -0.5, y: 1 };
              break;
            case "left":
              r = { x: -1, y: 0 };
              break;
            case "top-left":
              r = { x: -0.5, y: -0.5 };
              break;
            default:
              r = { x: 0, y: 0 };
          }
          c.particles.move.straight
            ? ((this.vx = r.x),
              (this.vy = r.y),
              c.particles.move.random &&
                ((this.vx = this.vx * Math.random()),
                (this.vy = this.vy * Math.random())))
            : ((this.vx = r.x + Math.random() - 0.5),
              (this.vy = r.y + Math.random() - 0.5)),
            (this.vx_i = this.vx),
            (this.vy_i = this.vy);
          var o = c.particles.shape.type;
          if (
            ("object" == typeof o
              ? o instanceof Array &&
                (this.shape = o[Math.floor(Math.random() * o.length)])
              : (this.shape = o),
            "image" == this.shape)
          ) {
            var l = c.particles.shape;
            (this.img = {
              src: l.image.src,
              ratio: l.image.width / l.image.height
            }),
              this.img.ratio || (this.img.ratio = 1),
              "svg" == c.tmp.img_type &&
                c.tmp.source_svg != a &&
                (c.fn.vendors.createSvgImg(this),
                c.tmp.pushing && (this.img.loaded = !1));
          }
        }),
        (c.fn.particle.prototype.draw = function () {
          function e() {
            c.canvas.ctx.drawImage(
              r,
              t.x - i,
              t.y - i,
              2 * i,
              (2 * i) / t.img.ratio
            );
          }
          var t = this;
          if (t.radius_bubble != a) var i = t.radius_bubble;
          else var i = t.radius;
          if (t.opacity_bubble != a) var n = t.opacity_bubble;
          else var n = t.opacity;
          if (t.color.rgb)
            var s =
              "rgba(" +
              t.color.rgb.r +
              "," +
              t.color.rgb.g +
              "," +
              t.color.rgb.b +
              "," +
              n +
              ")";
          else
            var s =
              "hsla(" +
              t.color.hsl.h +
              "," +
              t.color.hsl.s +
              "%," +
              t.color.hsl.l +
              "%," +
              n +
              ")";
          switch (
            ((c.canvas.ctx.fillStyle = s), c.canvas.ctx.beginPath(), t.shape)
          ) {
            case "circle":
              c.canvas.ctx.arc(t.x, t.y, i, 0, 2 * Math.PI, !1);
              break;
            case "edge":
              c.canvas.ctx.rect(t.x - i, t.y - i, 2 * i, 2 * i);
              break;
            case "triangle":
              c.fn.vendors.drawShape(
                c.canvas.ctx,
                t.x - i,
                t.y + i / 1.66,
                2 * i,
                3,
                2
              );
              break;
            case "polygon":
              c.fn.vendors.drawShape(
                c.canvas.ctx,
                t.x - i / (c.particles.shape.polygon.nb_sides / 3.5),
                t.y - i / 0.76,
                (2.66 * i) / (c.particles.shape.polygon.nb_sides / 3),
                c.particles.shape.polygon.nb_sides,
                1
              );
              break;
            case "star":
              c.fn.vendors.drawShape(
                c.canvas.ctx,
                t.x - (2 * i) / (c.particles.shape.polygon.nb_sides / 4),
                t.y - i / 1.52,
                (2 * i * 2.66) / (c.particles.shape.polygon.nb_sides / 3),
                c.particles.shape.polygon.nb_sides,
                2
              );
              break;
            case "image":
              if ("svg" == c.tmp.img_type) var r = t.img.obj;
              else var r = c.tmp.img_obj;
              r && e();
          }
          c.canvas.ctx.closePath(),
            c.particles.shape.stroke.width > 0 &&
              ((c.canvas.ctx.strokeStyle = c.particles.shape.stroke.color),
              (c.canvas.ctx.lineWidth = c.particles.shape.stroke.width),
              c.canvas.ctx.stroke()),
            c.canvas.ctx.fill();
        }),
        (c.fn.particlesCreate = function () {
          for (var e = 0; e < c.particles.number.value; e++)
            c.particles.array.push(
              new c.fn.particle(c.particles.color, c.particles.opacity.value)
            );
        }),
        (c.fn.particlesUpdate = function () {
          for (var e = 0; e < c.particles.array.length; e++) {
            var a = c.particles.array[e];
            if (c.particles.move.enable) {
              var t = c.particles.move.speed / 2;
              (a.x += a.vx * t), (a.y += a.vy * t);
            }
            if (
              (c.particles.opacity.anim.enable &&
                (1 == a.opacity_status
                  ? (a.opacity >= c.particles.opacity.value &&
                      (a.opacity_status = !1),
                    (a.opacity += a.vo))
                  : (a.opacity <= c.particles.opacity.anim.opacity_min &&
                      (a.opacity_status = !0),
                    (a.opacity -= a.vo)),
                a.opacity < 0 && (a.opacity = 0)),
              c.particles.size.anim.enable &&
                (1 == a.size_status
                  ? (a.radius >= c.particles.size.value && (a.size_status = !1),
                    (a.radius += a.vs))
                  : (a.radius <= c.particles.size.anim.size_min &&
                      (a.size_status = !0),
                    (a.radius -= a.vs)),
                a.radius < 0 && (a.radius = 0)),
              "bounce" == c.particles.move.out_mode)
            )
              var i = {
                x_left: a.radius,
                x_right: c.canvas.w,
                y_top: a.radius,
                y_bottom: c.canvas.h
              };
            else
              var i = {
                x_left: -a.radius,
                x_right: c.canvas.w + a.radius,
                y_top: -a.radius,
                y_bottom: c.canvas.h + a.radius
              };
            switch (
              (a.x - a.radius > c.canvas.w
                ? ((a.x = i.x_left), (a.y = Math.random() * c.canvas.h))
                : a.x + a.radius < 0 &&
                  ((a.x = i.x_right), (a.y = Math.random() * c.canvas.h)),
              a.y - a.radius > c.canvas.h
                ? ((a.y = i.y_top), (a.x = Math.random() * c.canvas.w))
                : a.y + a.radius < 0 &&
                  ((a.y = i.y_bottom), (a.x = Math.random() * c.canvas.w)),
              c.particles.move.out_mode)
            ) {
              case "bounce":
                a.x + a.radius > c.canvas.w
                  ? (a.vx = -a.vx)
                  : a.x - a.radius < 0 && (a.vx = -a.vx),
                  a.y + a.radius > c.canvas.h
                    ? (a.vy = -a.vy)
                    : a.y - a.radius < 0 && (a.vy = -a.vy);
            }
            if (
              (n("grab", c.interactivity.events.onhover.mode) &&
                c.fn.modes.grabParticle(a),
              (n("bubble", c.interactivity.events.onhover.mode) ||
                n("bubble", c.interactivity.events.onclick.mode)) &&
                c.fn.modes.bubbleParticle(a),
              (n("repulse", c.interactivity.events.onhover.mode) ||
                n("repulse", c.interactivity.events.onclick.mode)) &&
                c.fn.modes.repulseParticle(a),
              c.particles.line_linked.enable || c.particles.move.attract.enable)
            )
              for (var s = e + 1; s < c.particles.array.length; s++) {
                var r = c.particles.array[s];
                c.particles.line_linked.enable &&
                  c.fn.interact.linkParticles(a, r),
                  c.particles.move.attract.enable &&
                    c.fn.interact.attractParticles(a, r),
                  c.particles.move.bounce &&
                    c.fn.interact.bounceParticles(a, r);
              }
          }
        }),
        (c.fn.particlesDraw = function () {
          c.canvas.ctx.clearRect(0, 0, c.canvas.w, c.canvas.h),
            c.fn.particlesUpdate();
          for (var e = 0; e < c.particles.array.length; e++) {
            var a = c.particles.array[e];
            a.draw();
          }
        }),
        (c.fn.particlesEmpty = function () {
          c.particles.array = [];
        }),
        (c.fn.particlesRefresh = function () {
          cancelRequestAnimFrame(c.fn.checkAnimFrame),
            cancelRequestAnimFrame(c.fn.drawAnimFrame),
            (c.tmp.source_svg = a),
            (c.tmp.img_obj = a),
            (c.tmp.count_svg = 0),
            c.fn.particlesEmpty(),
            c.fn.canvasClear(),
            c.fn.vendors.start();
        }),
        (c.fn.interact.linkParticles = function (e, a) {
          var t = e.x - a.x,
            i = e.y - a.y,
            n = Math.sqrt(t * t + i * i);
          if (n <= c.particles.line_linked.distance) {
            var s =
              c.particles.line_linked.opacity -
              n /
                (1 / c.particles.line_linked.opacity) /
                c.particles.line_linked.distance;
            if (s > 0) {
              var r = c.particles.line_linked.color_rgb_line;
              (c.canvas.ctx.strokeStyle =
                "rgba(" + r.r + "," + r.g + "," + r.b + "," + s + ")"),
                (c.canvas.ctx.lineWidth = c.particles.line_linked.width),
                c.canvas.ctx.beginPath(),
                c.canvas.ctx.moveTo(e.x, e.y),
                c.canvas.ctx.lineTo(a.x, a.y),
                c.canvas.ctx.stroke(),
                c.canvas.ctx.closePath();
            }
          }
        }),
        (c.fn.interact.attractParticles = function (e, a) {
          var t = e.x - a.x,
            i = e.y - a.y,
            n = Math.sqrt(t * t + i * i);
          if (n <= c.particles.line_linked.distance) {
            var s = t / (1e3 * c.particles.move.attract.rotateX),
              r = i / (1e3 * c.particles.move.attract.rotateY);
            (e.vx -= s), (e.vy -= r), (a.vx += s), (a.vy += r);
          }
        }),
        (c.fn.interact.bounceParticles = function (e, a) {
          var t = e.x - a.x,
            i = e.y - a.y,
            n = Math.sqrt(t * t + i * i),
            s = e.radius + a.radius;
          s >= n &&
            ((e.vx = -e.vx), (e.vy = -e.vy), (a.vx = -a.vx), (a.vy = -a.vy));
        }),
        (c.fn.modes.pushParticles = function (e, a) {
          c.tmp.pushing = !0;
          for (var t = 0; e > t; t++)
            c.particles.array.push(
              new c.fn.particle(c.particles.color, c.particles.opacity.value, {
                x: a ? a.pos_x : Math.random() * c.canvas.w,
                y: a ? a.pos_y : Math.random() * c.canvas.h
              })
            ),
              t == e - 1 &&
                (c.particles.move.enable || c.fn.particlesDraw(),
                (c.tmp.pushing = !1));
        }),
        (c.fn.modes.removeParticles = function (e) {
          c.particles.array.splice(0, e),
            c.particles.move.enable || c.fn.particlesDraw();
        }),
        (c.fn.modes.bubbleParticle = function (e) {
          function t() {
            (e.opacity_bubble = e.opacity), (e.radius_bubble = e.radius);
          }
          function i(t, i, n, s, r) {
            if (t != i)
              if (c.tmp.bubble_duration_end) {
                if (n != a) {
                  var l =
                      s - (m * (s - t)) / c.interactivity.modes.bubble.duration,
                    v = t - l;
                  (d = t + v),
                    "size" == r && (e.radius_bubble = d),
                    "opacity" == r && (e.opacity_bubble = d);
                }
              } else if (o <= c.interactivity.modes.bubble.distance) {
                if (n != a) var p = n;
                else var p = s;
                if (p != t) {
                  var d =
                    s - (m * (s - t)) / c.interactivity.modes.bubble.duration;
                  "size" == r && (e.radius_bubble = d),
                    "opacity" == r && (e.opacity_bubble = d);
                }
              } else
                "size" == r && (e.radius_bubble = a),
                  "opacity" == r && (e.opacity_bubble = a);
          }
          if (
            c.interactivity.events.onhover.enable &&
            n("bubble", c.interactivity.events.onhover.mode)
          ) {
            var s = e.x - c.interactivity.mouse.pos_x,
              r = e.y - c.interactivity.mouse.pos_y,
              o = Math.sqrt(s * s + r * r),
              l = 1 - o / c.interactivity.modes.bubble.distance;
            if (o <= c.interactivity.modes.bubble.distance) {
              if (l >= 0 && "mousemove" == c.interactivity.status) {
                if (c.interactivity.modes.bubble.size != c.particles.size.value)
                  if (
                    c.interactivity.modes.bubble.size > c.particles.size.value
                  ) {
                    var v = e.radius + c.interactivity.modes.bubble.size * l;
                    v >= 0 && (e.radius_bubble = v);
                  } else {
                    var p = e.radius - c.interactivity.modes.bubble.size,
                      v = e.radius - p * l;
                    v > 0 ? (e.radius_bubble = v) : (e.radius_bubble = 0);
                  }
                if (
                  c.interactivity.modes.bubble.opacity !=
                  c.particles.opacity.value
                )
                  if (
                    c.interactivity.modes.bubble.opacity >
                    c.particles.opacity.value
                  ) {
                    var d = c.interactivity.modes.bubble.opacity * l;
                    d > e.opacity &&
                      d <= c.interactivity.modes.bubble.opacity &&
                      (e.opacity_bubble = d);
                  } else {
                    var d =
                      e.opacity -
                      (c.particles.opacity.value -
                        c.interactivity.modes.bubble.opacity) *
                        l;
                    d < e.opacity &&
                      d >= c.interactivity.modes.bubble.opacity &&
                      (e.opacity_bubble = d);
                  }
              }
            } else t();
            "mouseleave" == c.interactivity.status && t();
          } else if (
            c.interactivity.events.onclick.enable &&
            n("bubble", c.interactivity.events.onclick.mode)
          ) {
            if (c.tmp.bubble_clicking) {
              var s = e.x - c.interactivity.mouse.click_pos_x,
                r = e.y - c.interactivity.mouse.click_pos_y,
                o = Math.sqrt(s * s + r * r),
                m =
                  (new Date().getTime() - c.interactivity.mouse.click_time) /
                  1e3;
              m > c.interactivity.modes.bubble.duration &&
                (c.tmp.bubble_duration_end = !0),
                m > 2 * c.interactivity.modes.bubble.duration &&
                  ((c.tmp.bubble_clicking = !1),
                  (c.tmp.bubble_duration_end = !1));
            }
            c.tmp.bubble_clicking &&
              (i(
                c.interactivity.modes.bubble.size,
                c.particles.size.value,
                e.radius_bubble,
                e.radius,
                "size"
              ),
              i(
                c.interactivity.modes.bubble.opacity,
                c.particles.opacity.value,
                e.opacity_bubble,
                e.opacity,
                "opacity"
              ));
          }
        }),
        (c.fn.modes.repulseParticle = function (e) {
          function a() {
            var a = Math.atan2(u, m);
            if (
              ((e.vx = y * Math.cos(a)),
              (e.vy = y * Math.sin(a)),
              "bounce" == c.particles.move.out_mode)
            ) {
              var t = { x: e.x + e.vx, y: e.y + e.vy };
              t.x + e.radius > c.canvas.w
                ? (e.vx = -e.vx)
                : t.x - e.radius < 0 && (e.vx = -e.vx),
                t.y + e.radius > c.canvas.h
                  ? (e.vy = -e.vy)
                  : t.y - e.radius < 0 && (e.vy = -e.vy);
            }
          }
          if (
            c.interactivity.events.onhover.enable &&
            n("repulse", c.interactivity.events.onhover.mode) &&
            "mousemove" == c.interactivity.status
          ) {
            var t = e.x - c.interactivity.mouse.pos_x,
              s = e.y - c.interactivity.mouse.pos_y,
              r = Math.sqrt(t * t + s * s),
              o = { x: t / r, y: s / r },
              l = c.interactivity.modes.repulse.distance,
              v = 100,
              p = i((1 / l) * (-1 * Math.pow(r / l, 2) + 1) * l * v, 0, 50),
              d = { x: e.x + o.x * p, y: e.y + o.y * p };
            "bounce" == c.particles.move.out_mode
              ? (d.x - e.radius > 0 &&
                  d.x + e.radius < c.canvas.w &&
                  (e.x = d.x),
                d.y - e.radius > 0 &&
                  d.y + e.radius < c.canvas.h &&
                  (e.y = d.y))
              : ((e.x = d.x), (e.y = d.y));
          } else if (
            c.interactivity.events.onclick.enable &&
            n("repulse", c.interactivity.events.onclick.mode)
          )
            if (
              (c.tmp.repulse_finish ||
                (c.tmp.repulse_count++,
                c.tmp.repulse_count == c.particles.array.length &&
                  (c.tmp.repulse_finish = !0)),
              c.tmp.repulse_clicking)
            ) {
              var l = Math.pow(c.interactivity.modes.repulse.distance / 6, 3),
                m = c.interactivity.mouse.click_pos_x - e.x,
                u = c.interactivity.mouse.click_pos_y - e.y,
                b = m * m + u * u,
                y = -l / b;
              l >= b && a();
            } else
              0 == c.tmp.repulse_clicking && ((e.vx = e.vx_i), (e.vy = e.vy_i));
        }),
        (c.fn.modes.grabParticle = function (e) {
          if (
            c.interactivity.events.onhover.enable &&
            "mousemove" == c.interactivity.status
          ) {
            var a = e.x - c.interactivity.mouse.pos_x,
              t = e.y - c.interactivity.mouse.pos_y,
              i = Math.sqrt(a * a + t * t);
            if (i <= c.interactivity.modes.grab.distance) {
              var n =
                c.interactivity.modes.grab.line_linked.opacity -
                i /
                  (1 / c.interactivity.modes.grab.line_linked.opacity) /
                  c.interactivity.modes.grab.distance;
              if (n > 0) {
                var s = c.particles.line_linked.color_rgb_line;
                (c.canvas.ctx.strokeStyle =
                  "rgba(" + s.r + "," + s.g + "," + s.b + "," + n + ")"),
                  (c.canvas.ctx.lineWidth = c.particles.line_linked.width),
                  c.canvas.ctx.beginPath(),
                  c.canvas.ctx.moveTo(e.x, e.y),
                  c.canvas.ctx.lineTo(
                    c.interactivity.mouse.pos_x,
                    c.interactivity.mouse.pos_y
                  ),
                  c.canvas.ctx.stroke(),
                  c.canvas.ctx.closePath();
              }
            }
          }
        }),
        (c.fn.vendors.eventsListeners = function () {
          "window" == c.interactivity.detect_on
            ? (c.interactivity.el = window)
            : "parent" == c.interactivity.detect_on
            ? (c.interactivity.el = c.canvas.el.parentNode)
            : "object" == typeof c.interactivity.detect_on
            ? (c.interactivity.el = c.interactivity.detect_on)
            : (c.interactivity.el = c.canvas.el),
            (c.interactivity.events.onhover.enable ||
              c.interactivity.events.onclick.enable) &&
              (e(c.interactivity.el).on("mousemove", function (a) {
                if (c.interactivity.el == window)
                  var t = a.clientX,
                    i = a.clientY;
                else
                  var n = e(c.interactivity.el).offset(),
                    t = a.pageX - n.left,
                    i = a.pageY - n.top;
                (c.interactivity.mouse.pos_x = t),
                  (c.interactivity.mouse.pos_y = i),
                  c.tmp.retina &&
                    ((c.interactivity.mouse.pos_x *= c.canvas.pxratio),
                    (c.interactivity.mouse.pos_y *= c.canvas.pxratio)),
                  (c.interactivity.status = "mousemove");
              }),
              c.interactivity.el.addEventListener("mouseleave", function (e) {
                (c.interactivity.mouse.pos_x = null),
                  (c.interactivity.mouse.pos_y = null),
                  (c.interactivity.status = "mouseleave");
              })),
            c.interactivity.events.onclick.enable &&
              c.interactivity.el.addEventListener("click", function () {
                if (
                  ((c.interactivity.mouse.click_pos_x =
                    c.interactivity.mouse.pos_x),
                  (c.interactivity.mouse.click_pos_y =
                    c.interactivity.mouse.pos_y),
                  (c.interactivity.mouse.click_time = new Date().getTime()),
                  c.interactivity.events.onclick.enable)
                )
                  switch (c.interactivity.events.onclick.mode) {
                    case "push":
                      c.particles.move.enable
                        ? c.fn.modes.pushParticles(
                            c.interactivity.modes.push.particles_nb,
                            c.interactivity.mouse
                          )
                        : 1 == c.interactivity.modes.push.particles_nb
                        ? c.fn.modes.pushParticles(
                            c.interactivity.modes.push.particles_nb,
                            c.interactivity.mouse
                          )
                        : c.interactivity.modes.push.particles_nb > 1 &&
                          c.fn.modes.pushParticles(
                            c.interactivity.modes.push.particles_nb
                          );
                      break;
                    case "remove":
                      c.fn.modes.removeParticles(
                        c.interactivity.modes.remove.particles_nb
                      );
                      break;
                    case "bubble":
                      c.tmp.bubble_clicking = !0;
                      break;
                    case "repulse":
                      (c.tmp.repulse_clicking = !0),
                        (c.tmp.repulse_count = 0),
                        (c.tmp.repulse_finish = !1),
                        setTimeout(function () {
                          c.tmp.repulse_clicking = !1;
                        }, 1e3 * c.interactivity.modes.repulse.duration);
                  }
              });
        }),
        (c.fn.vendors.densityAutoParticles = function () {
          if (c.particles.number.density.enable) {
            var e = (c.canvas.el.width * c.canvas.el.height) / 1e3;
            c.tmp.retina && (e /= 2 * c.canvas.pxratio);
            var a =
                (e * c.particles.number.value) /
                c.particles.number.density.value_area,
              t = c.particles.array.length - a;
            0 > t
              ? c.fn.modes.pushParticles(Math.abs(t))
              : c.fn.modes.removeParticles(t);
          }
        }),
        (c.fn.vendors.checkOverlap = function (e, a) {
          for (var t = 0; t < c.particles.array.length; t++) {
            var i = c.particles.array[t],
              n = e.x - i.x,
              s = e.y - i.y,
              r = Math.sqrt(n * n + s * s);
            r <= e.radius + i.radius &&
              ((e.x = a ? a.x : Math.random() * c.canvas.w),
              (e.y = a ? a.y : Math.random() * c.canvas.h),
              c.fn.vendors.checkOverlap(e));
          }
        }),
        (c.fn.vendors.createSvgImg = function (e) {
          var a = c.tmp.source_svg,
            t = /#([0-9A-F]{3,6})/gi,
            i = a.replace(t, function (a, t, i, n) {
              if (e.color.rgb)
                var s =
                  "rgba(" +
                  e.color.rgb.r +
                  "," +
                  e.color.rgb.g +
                  "," +
                  e.color.rgb.b +
                  "," +
                  e.opacity +
                  ")";
              else
                var s =
                  "hsla(" +
                  e.color.hsl.h +
                  "," +
                  e.color.hsl.s +
                  "%," +
                  e.color.hsl.l +
                  "%," +
                  e.opacity +
                  ")";
              return s;
            }),
            n = new Blob([i], { type: "image/svg+xml;charset=utf-8" }),
            s = window.URL || window.webkitURL || window,
            r = s.createObjectURL(n),
            o = new Image();
          o.addEventListener("load", function () {
            (e.img.obj = o),
              (e.img.loaded = !0),
              s.revokeObjectURL(r),
              c.tmp.count_svg++;
          }),
            (o.src = r);
        }),
        (c.fn.vendors.destroypJS = function () {
          cancelAnimationFrame(c.fn.drawAnimFrame), s.remove(), (pJSDom = null);
        }),
        (c.fn.vendors.drawShape = function (e, a, t, i, n, s) {
          var r = n * s,
            c = n / s,
            o = (180 * (c - 2)) / c,
            l = Math.PI - (Math.PI * o) / 180;
          e.save(), e.beginPath(), e.translate(a, t), e.moveTo(0, 0);
          for (var v = 0; r > v; v++)
            e.lineTo(i, 0), e.translate(i, 0), e.rotate(l);
          e.fill(), e.restore();
        }),
        (c.fn.vendors.exportImg = function () {
          window.open(c.canvas.el.toDataURL("image/png"), "_blank");
        }),
        (c.fn.vendors.loadImg = function (e) {
          if (((c.tmp.img_error = a), "" != c.particles.shape.image.src))
            if ("svg" == e) {
              var t = new XMLHttpRequest();
              t.open("GET", c.particles.shape.image.src),
                (t.onreadystatechange = function (e) {
                  4 == t.readyState &&
                    (200 == t.status
                      ? ((c.tmp.source_svg = e.currentTarget.response),
                        c.fn.vendors.checkBeforeDraw())
                      : (console.log("Error pJS - Image not found"),
                        (c.tmp.img_error = !0)));
                }),
                t.send();
            } else {
              var i = new Image();
              i.addEventListener("load", function () {
                (c.tmp.img_obj = i), c.fn.vendors.checkBeforeDraw();
              }),
                (i.src = c.particles.shape.image.src);
            }
          else console.log("Error pJS - No image.src"), (c.tmp.img_error = !0);
        }),
        (c.fn.vendors.draw = function () {
          "image" == c.particles.shape.type
            ? "svg" == c.tmp.img_type
              ? c.tmp.count_svg >= c.particles.number.value
                ? (c.fn.particlesDraw(),
                  c.particles.move.enable
                    ? (c.fn.drawAnimFrame = requestAnimFrame(c.fn.vendors.draw))
                    : cancelRequestAnimFrame(c.fn.drawAnimFrame))
                : c.tmp.img_error ||
                  (c.fn.drawAnimFrame = requestAnimFrame(c.fn.vendors.draw))
              : c.tmp.img_obj != a
              ? (c.fn.particlesDraw(),
                c.particles.move.enable
                  ? (c.fn.drawAnimFrame = requestAnimFrame(c.fn.vendors.draw))
                  : cancelRequestAnimFrame(c.fn.drawAnimFrame))
              : c.tmp.img_error ||
                (c.fn.drawAnimFrame = requestAnimFrame(c.fn.vendors.draw))
            : (c.fn.particlesDraw(),
              c.particles.move.enable
                ? (c.fn.drawAnimFrame = requestAnimFrame(c.fn.vendors.draw))
                : cancelRequestAnimFrame(c.fn.drawAnimFrame));
        }),
        (c.fn.vendors.checkBeforeDraw = function () {
          "image" == c.particles.shape.type
            ? "svg" == c.tmp.img_type && c.tmp.source_svg == a
              ? (c.tmp.checkAnimFrame = requestAnimFrame(check))
              : (cancelRequestAnimFrame(c.tmp.checkAnimFrame),
                c.tmp.img_error || (c.fn.vendors.init(), c.fn.vendors.draw()))
            : (c.fn.vendors.init(), c.fn.vendors.draw());
        }),
        (c.fn.vendors.init = function () {
          c.fn.retinaInit(),
            c.fn.canvasInit(),
            c.fn.canvasSize(),
            c.fn.canvasPaint(),
            c.fn.particlesCreate(),
            c.fn.vendors.densityAutoParticles(),
            (c.particles.line_linked.color_rgb_line = t(
              c.particles.line_linked.color
            ));
        }),
        (c.fn.vendors.start = function () {
          n("image", c.particles.shape.type)
            ? ((c.tmp.img_type = c.particles.shape.image.src.substr(
                c.particles.shape.image.src.length - 3
              )),
              c.fn.vendors.loadImg(c.tmp.img_type))
            : c.fn.vendors.checkBeforeDraw();
        }),
        c.fn.vendors.eventsListeners(),
        c.fn.vendors.start();
    };
    return (
      (Object.deepExtend = function (e, a) {
        for (var t in a)
          a[t] && a[t].constructor && a[t].constructor === Object
            ? ((e[t] = e[t] || {}), arguments.callee(e[t], a[t]))
            : (e[t] = a[t]);
        return e;
      }),
      (window.requestAnimFrame = (function () {
        return (
          window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          window.oRequestAnimationFrame ||
          window.msRequestAnimationFrame ||
          function (e) {
            window.setTimeout(e, 1e3 / 60);
          }
        );
      })()),
      (window.cancelRequestAnimFrame = (function () {
        return (
          window.cancelAnimationFrame ||
          window.webkitCancelRequestAnimationFrame ||
          window.mozCancelRequestAnimationFrame ||
          window.oCancelRequestAnimationFrame ||
          window.msCancelRequestAnimationFrame ||
          clearTimeout
        );
      })()),
      s
    );
  }),
  N2D("particles"));
